// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  output   = "../src/generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum TRole {
  USER
  ADMIN
  SUPERADMIN
  AUTHOR
}

model User {
  id            String    @id
  name          String
  email         String
  emailVerified Boolean
  image         String?
  role          TRole     @default(USER)
  firstName     String?
  lastName      String?
  sessions      Session[]
  accounts      Account[]
  orders        Order[]

  createdAt DateTime
  updatedAt DateTime

  banned     Boolean?  @default(false)
  banReason  String?
  banExpires DateTime?

  @@unique([email])
  @@map("user")
}

model Session {
  id        String   @id
  expiresAt DateTime
  token     String
  createdAt DateTime
  updatedAt DateTime
  ipAddress String?
  userAgent String?
  userId    String
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  impersonatedBy String?

  @@unique([token])
  @@map("session")
}

model Account {
  id                    String    @id
  accountId             String
  providerId            String
  userId                String
  user                  User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  accessToken           String?
  refreshToken          String?
  idToken               String?
  accessTokenExpiresAt  DateTime?
  refreshTokenExpiresAt DateTime?
  scope                 String?
  password              String?
  createdAt             DateTime
  updatedAt             DateTime

  @@map("account")
}

model Verification {
  id         String    @id
  identifier String
  value      String
  expiresAt  DateTime
  createdAt  DateTime?
  updatedAt  DateTime?

  @@map("verification")
}

model Product {
  id          String  @id @default(cuid())
  name        String  @db.VarChar(100)
  description String? @db.Text
  price       Int     @db.Integer

  orderItems OrderItem[]
  categoryId String?
  category   Category?   @relation(fields: [categoryId], references: [id], onDelete: SetNull, onUpdate: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("product")
}

enum TStatusOrder {
  PENDING
  PAID
  CANCELLED
}

enum TPayment {
  CASH
  QRIS
}

model Order {
  id           String       @id @default(cuid())
  customerName String       @db.VarChar(100)
  status       TStatusOrder @default(PENDING)
  totalAmount  Int          @default(0)
  payment      TPayment     @default(CASH)
  qrisData     String?      @db.Text
  orderItems   OrderItem[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  userId    String

  @@map("order")
}

model OrderItem {
  id        String  @id @default(cuid())
  order     Order   @relation(fields: [orderId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  orderId   String
  product   Product @relation(fields: [productId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  productId String
  quantity  Int     @default(1) @db.SmallInt
  subtotal  Int // price * quantity

  @@map("order_item")
}

model Category {
  id          String    @id @default(cuid())
  name        String    @unique @db.VarChar(50)
  description String    @db.Text
  prducts     Product[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("category")
}
